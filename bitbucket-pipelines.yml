
options:
  max-time: 10

pipelines:
  default:
    - parallel:
      - step:
          name: Build & Test 3.7
          image: python:3.7
          caches: &caches
            - pip
          script: &build_test
            - apt update
            - apt install -y build-essential libffi-dev libfuzzy-dev python3-dev
            - mkdir -p /etc/assemblyline/
            - mkdir -p /var/cache/assemblyline/
            - mkdir -p /var/lib/assemblyline/
            - cp test/bitbucket/config.yml /etc/assemblyline
            # Install al common from source
            - git clone git@bitbucket.org:cse-assemblyline/alv4.git ~/alv4
            - cd ~/alv4 && pwd
            # Try to checkout the matching branch, if the command fails, don't care.
            - git checkout -b $BITBUCKET_BRANCH -t origin/$BITBUCKET_BRANCH || true
            - pip install -e .
            # Install al core from source
            - git clone git@bitbucket.org:cse-assemblyline/alv4_core.git ~/alv4_core
            - cd ~/alv4_core && pwd
            # Try to checkout the matching branch, if the command fails, don't care.
            - git checkout -b $BITBUCKET_BRANCH -t origin/$BITBUCKET_BRANCH || true
            - pip install -e .
            - cd $BITBUCKET_CLONE_DIR && pwd
            - pip install -r test/requirements.txt
            - pip install -e .
            - python -m assemblyline_ui.app &
            - python -m assemblyline_ui.socketsrv &
            - pytest -rsx -vv
          services: &services
            - elasticsearch
            - redis
            - nginx
            - minio
      - step:
          name: Build & Test 3.8
          image: python:3.8
          caches: *caches
          script: *build_test
          services: *services

  tags:
    v*:
      - step:
          name: Build Package
          image: python:3.8
          script:
            - pip install wheel
            - python setup.py bdist_wheel
            - ls dist/
          artifacts:
            - dist/*
      - parallel:
        - step:
            name: Test 3.7
            image: python:3.7
            services: *services
            script: &deploy_test
              - rm -rf assemblyline_core setup.py  # Make sure we are running on the package from the prior build
              - apt update
              - apt install -y build-essential libffi-dev libfuzzy-dev python3-dev
              - pip install -f dist assemblyline-ui
              - mkdir -p /etc/assemblyline/
              - mkdir -p /var/cache/assemblyline/
              - mkdir -p /var/lib/assemblyline/
              - cp test/bitbucket/config.yml /etc/assemblyline
              - pip install -r test/requirements.txt
              - python -m assemblyline_ui.app &
              - python -m assemblyline_ui.socketsrv &
              - pytest -rsx -vv
        - step:
            name: Test 3.8
            image: python:3.8
            services: *services
            script: *deploy_test
      - step:
          name: Deploy to Test PyPI
          image: python:3.8
          deployment: test-pypi
          script:
            - pip install twine
            - ls dist
            - twine upload --skip-existing --repository-url $TEST_REPOSITORY_URL dist/*
      - step:
          name: Deploy to PyPI
          image: python:3.8
          deployment: pypi
          script:
            - pip install twine
            - ls dist
            - twine upload --skip-existing dist/*
      - step:
          name: Deploy to Docker Hub
          image: python:3.8
          services: [docker]
          deployment: container
          script:
            - export TAG=${BITBUCKET_TAG#v}
            - until pip install assemblyline-ui== 2>&1 | grep -q $TAG; do sleep 2; done
            - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
            - docker build --build-arg version=$TAG -t cccs/assemblyline-ui:$TAG -t cccs/assemblyline-ui:latest docker/ui
            - docker build --build-arg version=$TAG -t cccs/assemblyline-socketio:$TAG -t cccs/assemblyline-socketio:latest docker/socketio
            - docker push cccs/assemblyline-ui
            - docker push cccs/assemblyline-socketio
definitions:
  services:
    elasticsearch:
      image: sgaroncse/elasticsearch:7.5.0
      memory: 2048
      environment:
        ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        DISCOVERY_TYPE: "single-node"

    redis:
      image: redis
      memory: 256

    nginx:
      image: sgaroncse/nginx-ssl:1.17.5
      environment:
        UI_HOST: localhost
        SOCKET_HOST: localhost
        KIBANA_HOST: localhost
        FQDN: localhost
      memory: 256

    minio:
      image: sgaroncse/minio
      memory: 256
      environment:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
