"""Lookup through Malware Bazaar.

"""
import os

from urllib import parse as ul

import requests

from flask import Flask, Response, jsonify, make_response, request


app = Flask(__name__)


VERIFY = os.environ.get("MB_VERIFY", False)
MAX_LIMIT = os.environ.get("MB_MAX_LIMIT", 50)  # Maximum number to return

# supported IOC names
VALID_IOC = ["hash", "imphash"]


def make_api_response(data, err: str = "", status_code: int = 200) -> Response:
    """Create a standard response for this API.
    """
    return make_response(
        jsonify({
            "api_response": data,
            "api_error_message": err,
            "api_status_code": status_code,
        }),
        status_code,
    )


@app.route("/ioc/", methods=["GET"])
def get_valid_ioc_names() -> Response:
    """Return valid IOC names supported by this service."""
    return make_api_response(VALID_IOC)


@app.route("/ioc/<indicator_name>/<ioc>/", methods=["GET"])
def lookup_ioc(indicator_name: str, ioc: str) -> dict[str, dict[str, str]]:
    """Lookup IOCs from Malware Bazaar.

    MB only has limited support of lookups based on IOCs.
    IOCs submitted must be URL encoded.

    If the IOC is found, a link to view the IOC on Malware Bazaar is returned.

    Arguments:(optional)
    max_timeout => Maximum execution time for the call in seconds [Default: 3 seconds]
    limit       => limit the amount of returned results per source [Default: 5]


    This method should return an api_response containing:

        {
            "<digest>":  {
                "link": <url to object>,
                "classification": UNRESTRICTED,
            },
            ...,
        }
    """
    if indicator_name not in VALID_IOC:
        return make_api_response(
            None,
            f"Invalid indicator name: {indicator_name}. [{', '.join(VALID_IOC)}]",
            400,
        )

    ioc = ul.unquote_plus(ioc)
    if indicator_name == "hash" and len(ioc) not in (32, 40, 64):
        return make_api_response(None, "Invalid hash provided. Require md5, sha1 or sha256", 400)

    limit = int(request.args.get("limit", "3"))
    if limit > int(MAX_LIMIT):
        limit = int(MAX_LIMIT)

    max_timeout = request.args.get('max_timeout', "3")
    # noinspection PyBroadException
    try:
        max_timeout = float(max_timeout)
    except Exception:
        max_timeout = 3.0

    session = requests.Session()
    url = "https://mb-api.abuse.ch/api/v1/"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }
    query = {
        "hash": "get_info",
        "imphash": "get_imphash",
    }[indicator_name]
    data = {
        "query": query,
        indicator_name: ioc,
        "limit": limit,
    }

    rsp = session.post(url, data, headers=headers, verify=VERIFY, timeout=max_timeout)
    # MB should always return a 200, even on error.
    if rsp.status_code != 200:
        return make_api_response(rsp.text, "Unknown error submitting data to upstream.", rsp.status_code)

    rsp_json = rsp.json()
    query_status = rsp_json.get("query_status")
    if query_status in ("no_result", "hash_not_found"):
        return make_api_response(None, "No results.", 404)
    elif query_status != "ok":
        # any other error, just return a generic error code
        return make_api_response(None, query_status, 400)

    # return view links to the gui once we know it's found
    data = rsp_json.get("data", [])

    links = {}
    for entity in data:
        digest = entity.get("sha256_hash")
        if digest:
            links[digest] = {
                "link": f"https://bazaar.abuse.ch/sample/{digest}/",
                "classification": "UNRESTRICTED",
            }
    return make_api_response(links)


def main():
    app.run(host="0.0.0.0", port=8000, debug=False)


if __name__ == "__main__":
    main()
