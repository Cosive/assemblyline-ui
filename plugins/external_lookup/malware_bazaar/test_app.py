import pytest
import requests

from .app import app, VALID_IOC


@pytest.fixture()
def test_client():
    """generate a test client."""
    with app.test_client() as client:
        with app.app_context():
            yield client


def test_get_valid_iocs(test_client):
    """Ensure iocs are returned."""
    rsp = test_client.get("/ioc/")

    assert rsp.status_code == 200
    data = rsp.json["api_response"]
    assert data == VALID_IOC


def test_hash_found(test_client, mocker):
    """Validate respone for a hash that exists."""
    digest = "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754"
    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "ok",
        "data": [{
            "sha256_hash": digest,
        }],
    }

    # setup mock response for a valid hash lookup
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/ioc/hash/{digest}/")
    expected = {
        "api_error_message": "",
        "api_response": {
            digest: {
                "classification": "UNRESTRICTED",
                "link": f"https://bazaar.abuse.ch/sample/{digest}/",
            },
        },
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected


def test_hash_dne(test_client, mocker):
    """Validate respone for a hash that does not exists."""
    digest = "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754"
    mock_response = mocker.MagicMock()
    mock_response.status_code = 404
    mock_response.json.return_value = {
        "query_status": "hash_not_found",
    }

    # setup mock response for a valid hash lookup
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/ioc/hash/{digest}/")
    expected = {
        "api_error_message": "No Result",
        "api_response": "",
        "api_status_code": 404,
    }
    assert rsp.status_code == 404
    assert rsp.json == expected
