import pytest
import requests


# from flask import current_app
# from pytest_mock import mocker

from .app import app, VALID_IOC


@pytest.fixture()
def test_client():
    """generate a test client."""
    with app.test_client() as client:
        with app.app_context():
            yield client


@pytest.fixture()
def digest_exists():
    """Mock digest exists"""
    r = requests.Response()
    r.status_code = 200
    r.content = {
        "query_status": "ok",
        "data": [{
            "sha256_hash": "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
            "sha1_hash": "77543bde72105ae1a28cc71815d9ea89ea162052",
            "md5_hash": "c40aead7a31d14e05b2ee4a11849eced",
            "first_seen": "2020-10-19 09:54:37",
            "last_seen": None,
            "file_name": "New Order POA12990120 From Akweni Group.exe",
            "file_size": 903680,
        }],
    }
    return r


def test_get_valid_iocs(test_client):
    """Ensure iocs are returned."""
    rsp = test_client.get("/ioc/")

    assert rsp.status_code == 200
    data = rsp.json["api_response"]
    assert data == VALID_IOC


def test_invalid_hash(test_client, mocker, digest_exists):
    """Validate respone for bad hashes."""
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = digest_exists
    digest = "a" * 32
    rsp = test_client.get(f"/ioc/hash/{digest}/")
    print(rsp.text)
    assert False
